{
	"name": "scdtype2 effective date ok",
	"properties": {
		"description": "create table scdt2_effectivedate(surrogatekey int identity, id int, name varchar(30), salary integer, start_date date, end_date date);\n \nselect * from scdt2_effectivedate;\n\ninsert into scdt2_effectivedate(id, name, salary, start_date) values(1, 'tds', 35000, '2023-02-1');\ninsert into scdt2_effectivedate(id, name, salary, start_date) values(2, 'Srinth', 55000, '2023-02-1');\ninsert into scdt2_effectivedate(id, name, salary, start_date) values(3, 'Alice Johnson', 75000, '2023-02-1');\nSELECT TOP (1000) * FROM [dbo].[scdt2_effectivedate]",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "scdt1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "lookup1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          Name as string,",
				"          Salary as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          surrogatekey as integer,",
				"          id as integer,",
				"          name as string,",
				"          salary as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 lookup(source1@Id == source2@id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 split(!isNull(surrogatekey),",
				"     disjoint: false) ~> split1@(update, insert)",
				"filter1 select(mapColumn(",
				"          surrogatekey,",
				"          id = split1@update@id,",
				"          name = split1@update@name,",
				"          salary = split1@update@salary,",
				"          start_date,",
				"          end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(end_date = currentUTC()-hours(24)) ~> derivedColumn2",
				"derivedColumn2 alterRow(insertIf(1==1)) ~> alterRow1",
				"split1@insert select(mapColumn(",
				"          Id = split1@insert@Id,",
				"          Name = split1@insert@Name,",
				"          Salary = split1@insert@Salary,",
				"          startdate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source2 select(mapColumn(",
				"          SQL_surrogatekey = surrogatekey,",
				"          SQL_id = id,",
				"          SQL_name = name,",
				"          SQL_salary = salary,",
				"          SQL_start_date = start_date,",
				"          SQL_end_date = end_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 derive(start_date = currentUTC()) ~> derivedColumn3",
				"split1@update filter(split1@update@Name!=split1@update@name || split1@update@Salary != split1@update@salary) ~> filter1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surrogatekey as integer,",
				"          id as integer,",
				"          name as string,",
				"          salary as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surrogatekey as integer,",
				"          id as integer,",
				"          name as string,",
				"          salary as integer,",
				"          start_date as date,",
				"          end_date as date",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id = Id,",
				"          name = Name,",
				"          salary = Salary,",
				"          start_date = startdate",
				"     )) ~> sink2"
			]
		}
	}
}